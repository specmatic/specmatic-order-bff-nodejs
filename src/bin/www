#!/usr/bin/env node

/**
 * Module dependencies.
 */
const dotenv = require("dotenv");
const api = require("../app");
const debug = require("debug")("specmatic-order-api-nodejs:server");
const http = require("node:http");

/**
 * Get port from environment and store in Express.
 */
dotenv.config();
const port = normalizePort(process.env.APP_PORT || "8080");
api.set("port", port);

/**
 * Create HTTP server.
 */
const server = http.createServer(api);

/**
 * Use api middleware and Listen on provided port, on all network interfaces.
 */
server.on("error", onError);
server.on("listening", onListening);
server.on("request", onRequest);
server.listen(port);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = Number.parseInt(val, 10);

  if (Number.isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  console.log(`API Server started on port ${port}`);
  debug(`Listening on ${bind}`);
}

/**
 * Event listener for HTTP server "request" event.
 * Format -> localhost -- [09/Jun/2024, 04:52:48PM] "GET /products HTTP/1.1"
 */
function onRequest(req, res) {
  const { hostname, url, method } = req;
  console.log(`${hostname} -- [${new Date().toLocaleString()}] "${method} ${url}"`);
}
